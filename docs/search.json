[
  {
    "objectID": "analysis_ITS2.html",
    "href": "analysis_ITS2.html",
    "title": "Script for the analysis of already processed ITS2 (fungal) reads obtained by Illumina (MiSeq)",
    "section": "",
    "text": "# Install required packages \n\nBiocManager::install(\"phyloseq\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"vegan\")\ninstall.packages(\"purrr\")"
  },
  {
    "objectID": "analysis_ITS2.html#load-all-the-data",
    "href": "analysis_ITS2.html#load-all-the-data",
    "title": "Script for the analysis of already processed ITS2 (fungal) reads obtained by Illumina (MiSeq)",
    "section": "Load all the data",
    "text": "Load all the data\nLoad the ASV table (with the taxonomy and sequence counts)\n\ndata=read.table(\"ASV_final_ITS.txt\", header = T, sep=\"\\t\")\n\n# we modify the taxonomy\ndata$Kingdom &lt;- gsub(\"k__\", \"\", data$Kingdom)\ndata$Phylum &lt;- gsub(\"p__\", \"\", data$Phylum)\ndata$Class &lt;- gsub(\"c__\", \"\", data$Class)\ndata$Order &lt;- gsub(\"o__\", \"\", data$Order)\ndata$Family &lt;- gsub(\"f__\", \"\", data$Family)\ndata$Genus &lt;- gsub(\"g__\", \"\", data$Genus)\n\ncolnames_data &lt;- colnames(data)\n\n# load the metadata describing the main characteristics of each sample\nmt &lt;- read.table(\"metadatos.txt\", sep = \"\\t\", header = T)\nrow.names(mt) &lt;- mt$Sample\n\n# select the columns where the bacterial taxonomy is indicated (From Phylum level to the ASV)\ntax &lt;- data[, 2:8]\n\n# select the columns where the number of sequences of each ASV in each sample is indicated\nASV &lt;- data[, 9:ncol(data)]\n\n# load the sequence of each ASV\ndna &lt;- Biostrings::DNAStringSet(data$ASV_seqs)\nnames(dna) &lt;- data$ASV_names\n\nrow.names(tax) &lt;- data$ASV_names\nrow.names(ASV) &lt;- data$ASV_names\nidentical(rownames(ASV), rownames(tax)) # it should be TRUE\n\n\nCREATE A PHYLOSEW OBJECT\n\nphy_OTUtable &lt;- otu_table(ASV, taxa_are_rows = TRUE)\nphy_taxonomy &lt;- tax_table(as.matrix(tax))\nphy_metadata &lt;- sample_data(mt)\n\n# Put everything into a phyloseq object\nphy_data_total &lt;- phyloseq(phy_OTUtable, phy_taxonomy, phy_metadata)\n\n# Check the number of samples included in each object\nnsamples(phy_OTUtable)\nsum(sample_names(phy_metadata) %in% sample_names(phy_OTUtable))\nnsamples(phy_metadata)\n\n\n\nFIRST TRIMMING OF THE DATASET\n\nOur dataset included samples obtained in spring and summer, samples coming from P. sylvestris, P. pinaster and P. sylvestris subsp. nevadensis.\nHere we only wanted the samples corresponding to P. sylvestris sampled in spring\n\n\nphy_data1 &lt;- subset_samples(phy_data_total, Season != \"Summer\") # removal of summer samples\nphy_data2 &lt;- subset_samples(phy_data1, Species == \"Psylvestris\") # selecting the plant host\n\n\n# check the total number of sequences\nnumsec &lt;- as.data.frame(colSums(otu_table(phy_data2)))\nView(numsec) # it is convenient to order this table\n\n\n# export the table \nwrite.table(data.frame(\" \" = rownames(numsec), numsec), file = \"NumberofWorkingSequences.txt\", sep = \"\\t\", row.names = FALSE)\n\n\n\nSUBSET SAMPLES\n\nWe want to separate the data by mountainous area under study and by plant compartment\n\n\nAlmijara &lt;- subset_samples(phy_data2, Site == \"Almijara\")\nAlmijara &lt;- prune_taxa(taxa_sums(Almijara) &gt; 0.0, Almijara)\n\nAlmijara_rizo &lt;- subset_samples(Almijara, Compartment == \"Rhizosphere\")\nAlmijara_rizo &lt;- prune_taxa(taxa_sums(Almijara_rizo) &gt; 0.0, Almijara_rizo)\n\nAlmijara_endo &lt;- subset_samples(Almijara, Compartment == \"Endosphere\")\nAlmijara_endo &lt;- prune_taxa(taxa_sums(Almijara_endo) &gt; 0.0, Almijara_endo)\n\nBaza &lt;- subset_samples(phy_data2, Site == \"Baza\")\nBaza &lt;- prune_taxa(taxa_sums(Baza) &gt; 0.0, Baza)\n\nBaza_rizo &lt;- subset_samples(Baza, Compartment == \"Rhizosphere\")\nBaza_rizo &lt;- prune_taxa(taxa_sums(Baza_rizo) &gt; 0.0, Baza_rizo)\n\nBaza_endo &lt;- subset_samples(Baza, Compartment == \"Endosphere\")\nBaza_endo &lt;- prune_taxa(taxa_sums(Baza_endo) &gt; 0.0, Baza_endo)\n\nNevada &lt;- subset_samples(phy_data2, Site == \"SierraNevada\")\nNevada &lt;- prune_taxa(taxa_sums(Nevada) &gt; 0.0, Nevada)\n\nNevada_rizo &lt;- subset_samples(Nevada, Compartment == \"Rhizosphere\")\nNevada_rizo &lt;- prune_taxa(taxa_sums(Nevada_rizo) &gt; 0.0, Nevada_rizo)\n\nNevada_endo &lt;- subset_samples(Nevada, Compartment == \"Endosphere\")\nNevada_endo &lt;- prune_taxa(taxa_sums(Nevada_endo) &gt; 0.0, Nevada_endo)\n\nrizo &lt;- subset_samples(phy_data2, Compartment == \"Rhizosphere\")\nrizo &lt;- prune_taxa(taxa_sums(rizo) &gt; 0.0, rizo)\n\nendo &lt;- subset_samples(phy_data2, Compartment == \"Endosphere\")\nendo &lt;- prune_taxa(taxa_sums(endo) &gt; 0.0, endo)\n\n\n\nRAREFACTION CURVES\n\nAlmijara (Rhizosphere)\n\n# 1.Almijara Rhizosphere..........................................\nmt &lt;- as.data.frame(sample_data(Almijara_rizo))[order(as.character(rownames(as.data.frame(sample_data(Almijara_rizo)))), decreasing = FALSE), ] # save the metadata of this sub-dataset\notu &lt;- otu_table(Almijara_rizo) # save the ASV table of this sub-dataset\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition) # prepare the data for a better plotting. Condition= \"Symptomatic\" and \"Asymptomatic\"\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = FALSE) # rarefaction itself\nrare &lt;- lapply(out, function(x) { # create a table from the rarefaction\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample # data preparation for the plotting\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition) # remove all the characters before \"/\"\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n# Esto que acabamos de hacer solo vale para las muestras en concreto que tengo ahora\n\nGenerate a plot\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) + # coloring by condition of the trees\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), linewidth = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"#3399FF\")) + # specific colors\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"#3399FF\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra de Almijara (Rhizosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\n\np\n\n\n# save the plot as .tiff\nggsave(filename = \"Rarefacc_rizo_Almijara_SciData_Fungi.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nAlmijara (Endosphere)\n\nmt &lt;- as.data.frame(sample_data(Almijara_endo))[order(as.character(rownames(as.data.frame(sample_data(Almijara_endo)))), decreasing = FALSE), ]\notu &lt;- otu_table(Almijara_endo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = FALSE)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\nGenerate a plot\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"deepskyblue\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"deepskyblue\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra de Almijara (Endosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\n\np\n\n\n# save the plot as .tiff\nggsave(filename = \"Rarefacc_Almijara_endo_SciData_fungi.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nBaza (Rhizosphere)\n\nmt &lt;- as.data.frame(sample_data(Baza_rizo))[order(as.character(rownames(as.data.frame(sample_data(Baza_rizo)))), decreasing = FALSE), ]\notu &lt;- otu_table(Baza_rizo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = FALSE)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\nGenerate a plot\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"#66CC33\", \"Asymptomatic\" = \"#66CC33\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"#66CC33\", \"Asymptomatic\" = \"#66CC33\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra de Baza (Rhizosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\n\np\n\n\n# save the plot as .tiff\nggsave(filename = \"Rarefacc_Baza_Rizo_SciData_fungi.tiff\", plot = p,device = tiff(),width = 18, height = 16, units = \"cm\", dpi = 800)\nrare=NULL\n\n\n\nBaza (Endosphere)\n\nmt &lt;- as.data.frame(sample_data(Baza_endo))[order(as.character(rownames(as.data.frame(sample_data(Baza_endo)))), decreasing = FALSE), ]\notu &lt;- otu_table(Baza_endo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\nGenerate a plot\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"green\", \"Asymptomatic\" = \"#3399FF\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"green\", \"Asymptomatic\" = \"#3399FF\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra de Baza (Endosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\np\n\n\n# save the plot as .tiff\nggsave(filename = \"Rarefacc_Baza_Rizo_SciData_fungi.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nSierra Nevada (Rhizosphere)\n\nmt &lt;- as.data.frame(sample_data(Nevada_rizo))[order(as.character(rownames(as.data.frame(sample_data(Nevada_rizo)))), decreasing = F), ]\notu &lt;- otu_table(Nevada_rizo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\nGenerate a plot\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"magenta\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"magenta\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra Nevada (Rhizosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\np\n\n\nggsave(filename = \"Rarefacc_SNevada_Rizo_SciData_fungi.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nSierra Nevada (Endosphere)\n\nmt &lt;- as.data.frame(sample_data(Nevada_endo))[order(as.character(rownames(as.data.frame(sample_data(Nevada_endo)))), decreasing = F), ]\notu &lt;- otu_table(Nevada_endo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"pink\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"pink\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra Nevada (Endosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\n\np\n\n\nggsave(filename = \"Rarefacc_SNevada_endo_SciData_fungi.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Script for data paper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees",
    "section": "",
    "text": "This repository contains scripts and analysis used for the datapaper “Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees”"
  },
  {
    "objectID": "index.html#sequencing-data",
    "href": "index.html#sequencing-data",
    "title": "Script for data paper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees",
    "section": "Sequencing data",
    "text": "Sequencing data\nThis scripts explaing all the steps the steps from the fastq files to a filtered ASV table.\n\nbacterial\nfungal"
  },
  {
    "objectID": "index.html#data-analysis",
    "href": "index.html#data-analysis",
    "title": "Script for data paper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees",
    "section": "Data analysis",
    "text": "Data analysis\nAll the steps from the previously obtained ASV table to the obtaining of the rarefaction curves are explained.\n\nbacterial\nfungal"
  },
  {
    "objectID": "index.html#data-integration-into-gbif",
    "href": "index.html#data-integration-into-gbif",
    "title": "Script for data paper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees",
    "section": "Data integration into GBIF",
    "text": "Data integration into GBIF\n\nSteps to accommodate the data into Darwin-Core Archive (for GBIF Integration)"
  },
  {
    "objectID": "index.html#sample-sequencing-scheme",
    "href": "index.html#sample-sequencing-scheme",
    "title": "Script for data paper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees",
    "section": "Sample sequencing scheme",
    "text": "Sample sequencing scheme\nTotal DNA was extracted from rhizosphere and root endosphere samples according to Lasa et al. (2024). Due to the high number of samples, DNA had to be sequenced in different MiSeq runs. So, finally, we got the following sequencing scheme:\n\nBacteria + Fungal samples:\n\nRun 1: Samples from rhizosphere, spring 2022.\nRun 2: Samples from endosphere, spring 2022.\nRun 3: Samples from rhizosphere, summer 2021.\nRun 4: samples from endosphere, summer 2021.\nRun 5: some samples from endosphere and other samples from root endosphere, summer 2021. It should be taken into account that in each sequencing run, 3 replicates of a MockCommunity were included.\n\n\nThe Data descriptor manuscript describes the data corresponding to the sub-project that included just P. sylvestris trees from Sierra Nevada, Sierra de Baza and Sierra de Almijara, Tejeda y Alhama (both symptomatic and decline-affected trees, according the Table above) obtained in spring 2022. In this project, both fungal and bacterial communities inhabiting the rhizosphere and root endosphere of the selected trees were considered."
  },
  {
    "objectID": "index.html#sample-sequencing-scheme-1",
    "href": "index.html#sample-sequencing-scheme-1",
    "title": "Script for data paper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees",
    "section": "Sample sequencing scheme",
    "text": "Sample sequencing scheme\nAccording to DADA2 developers, when our scientific projects include 2 or more sequencing runs, they should be processed separatedly. Once the Sequence Tables are obtained, all of them have to be merged into a one merged table, and we can go on processing all the samples of the same scientific project from this unique merged table. In our case, the 528 bacterial samples (+replicates of the MockCommunity) were thus separatedly processed according to the corresponding runs. Then, the 5 Sequence Table were joined into a just one table, all we followed processing that table. The same procedure was applied for fungal dataset.\nThus, all the samples of SUMHAL project were futher processed altogether, although the Data Descriptor just included samples corresponding to P. sylvestris trees (spring 2022) located in the three selected areas. Accordingly, the BioProject PRJNA993625 (NCBI SRA) included just the fastq files corresponding to this sub-project. In a near future, a second BioProject will be created again in NCBI SRA including the fastq files corresponding to another sub-project of the SUMHAL project"
  },
  {
    "objectID": "index.html#authors",
    "href": "index.html#authors",
    "title": "Script for data paper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees",
    "section": "Authors",
    "text": "Authors\n\nAna V Lasa  \nAntonio J. Pérez-Luque  \nAntonio José Fernández-González  \nPablo J. Villadas  \nJesús Mercado-Blanco  \nManuel Fernández-López"
  },
  {
    "objectID": "index.html#how-to-cite",
    "href": "index.html#how-to-cite",
    "title": "Script for data paper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees",
    "section": "How to cite:",
    "text": "How to cite:\n\nRepository:\nAna V. Lasa & Antonio J. Pérez-Luque (2024) Code repository of the DataPaper: Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees. INCLUIR DOI ZENODO https://doi.org/10.5281/zenodo.7350714\n\n\nMain paper:\nLasa, A.V.; Fernández-González, A.J.; Villadas, P.J.; Mercado-Blanco, J.; Pérez-Luque, A.J.; Fernández-López, M. (2024). Mediterranean pine forest decline: a matter of root-associated microbiota and climate change. Science of The Total Environment 926: 171858. https://doi.org/10.1016/j.scitotenv.2024.171858\n\n\nData Paper:\nInclude the cite when the DataPaper is published"
  },
  {
    "objectID": "sequencing_reads_processing_ITS2.html",
    "href": "sequencing_reads_processing_ITS2.html",
    "title": "Sequencing Reads Processing ITS2",
    "section": "",
    "text": "Aim\nProcessing of Illumina (MiSeq reads). ITS2 (fungal) reads\n\n#Install all the packages needeed\n#dada2\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"dada2\")\n\n#phyloseq\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"phyloseq\")\n\n#Biocgenerics\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"BiocGenerics\")\n\n#Biostrings\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"Biostrings\")\n\n#ShortRead\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"ShortRead\")\n\n#ggplot2 (for plotting)\ninstall.packages(\"ggplot2\")\n\n#tidyverse\ninstall.packages(\"tidyverse\")\n\n#Load corresponding libraries\nlibrary(dada2)\nlibrary(phyloseq)\nlibrary(BiocGenerics)\nlibrary(Biostrings)\nlibrary(ShortRead)\nlibrary(devtools)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n\npath &lt;- \"C:/Users/radik/Desktop/Psylvestris_DataPper\" # set the path where the fastq.gz files are\nlist.files(path) # check that all the needed files are in the path\n\n#NOTE: if our scientific project includes different sequencing runs (for instance, if you have a lot of samples that do not fit well into just one run), \n#we should repeat steps 1) to 6) for each sequencing run, and then (step 7), merge all the sequence tables obtained in the step 6)\n\nIf our scientific project includes different sequencing runs (for instance, if you have a lot of samples that do not fit well into just one run), we should repeat steps 1) to 6) for each sequencing run, and then (step 7), merge all the sequence tables obtained in the step 6).\n\n\nStep 1: Adaption of the file names\n\nSort Forward (F) and Reverse (R) files separatedly\nF and R fastq filenames should have the following format: SAMPLENAME_R1_001.fastq.gz;SAMPLENAME_R2_001.fastq.gz\nIn this example, the names of F and R file are the following: NGS006-22-EXP4-ITS2-SAMPLENAME_yyy-R1_001.fastq.gz\n\n\nfnFs &lt;- sort(list.files(path, pattern = \"_R1_001.fastq.gz\", full.names = TRUE))\nfnRs &lt;- sort(list.files(path, pattern = \"_R2_001.fastq.gz\", full.names = TRUE))\n\n# Extract sample names, assuming filenames have format: xxx-SAMPLENAME_yyy_R1_001.fastq.gz\nsample.names_raw &lt;- sapply(strsplit(basename(fnFs), \"_\"), `[`, 1)\n\nsample.names &lt;- gsub(\"NGS006-22-EXP4-ITS2-\", \"\", sample.names_raw) # replace the xxx part of the string, by nothing (or by the characters that allow you to get the sample names\n# output in this example: SAMPLENAME\n\n\n\nStep 2: Check the quality of the reads\n\n# a) Check the number of reads\nraw_reads_count &lt;- NULL\n\nfor (i in 1:length(fnFs)) {\n  raw_reads_count &lt;- rbind(raw_reads_count, length(ShortRead::readFastq(fnFs[i])))\n} # it counts the number of reads in fnFs\n\nrownames(raw_reads_count) &lt;- sample.names\ncolnames(raw_reads_count) &lt;- \"Number of reads\"\na &lt;- data.frame(\"_\" = rownames(raw_reads_count), raw_reads_count)\ncolnames(a) &lt;- c(\"Sample\", \"Number_of_reads\")\n\n# Check which samples have the highlest and lowest amount of reads\ncbind(row.names(raw_reads_count)[which.min(raw_reads_count)], min(raw_reads_count))\ncbind(row.names(raw_reads_count)[which.max(raw_reads_count)], max(raw_reads_count))\n\nwrite.table(data.frame(\"_\" = rownames(raw_reads_count), raw_reads_count), file = \"NumberRawReads.txt\", sep = \"\\t\", row.names = F)\n\n# b) Check the length of the reads\nreads &lt;- ShortRead::readFastq(fnFs) # it saves the reads into a new variable\nuniques &lt;- unique(reads@quality@quality@ranges@width) # to get the length of the reads (bp)\n\ncounts &lt;- NULL # it counts the number of reads of each length\nfor (i in 1:length(uniques)) {\n  counts &lt;- rbind(counts, length(which(reads@quality@quality@ranges@width == uniques[i])))\n}\n\n# check the histogram\nhistogram &lt;- cbind(uniques, counts)\ncolnames(histogram) &lt;- c(\"Seq.length\", \"counts\")\n\nwrite.table(histogram, \"Sequences_length.txt\", sep = \"\\t\", row.names = F)\n\nhead(histogram[order(histogram[, 1], decreasing = TRUE), ])\n\n# plot the histogram\nhist(reads@quality@quality@ranges@width, main = \"Forward length distribution\", xlab = \"Sequence length\", ylab = \"Raw reads\")\n\n# b) #c) Check the quality plots\nplotQualityProfile(fnFs[4:5]) # here you can plot whichever of the samples you want (in this example, samples number 4 and 5)\nplotQualityProfile(fnRs[4:5])\n\n\n\nStep 3: CUTADAPT, primer removal\n\n# define the sequence of the primers\nFWD &lt;- \"GTGARTCATCGAATCTTTG\" # primer fITS7\nREV &lt;- \"TCCTCCGCTTATTGATATGC\" # primer ITS4\n\n# Create a function to calculate all the orientations of F and R primers\nallOrients &lt;- function(primer) {\n  require(Biostrings)\n  dna &lt;- DNAString(primer) # BioStrings package works with strings but not with characters\n  orients &lt;- c(\n    Forward = dna, Complement = Biostrings::complement(dna), Reverse = reverse(dna),\n    RevComp = reverseComplement(dna)\n  )\n  return(sapply(orients, toString)) # change to string\n}\n\nFWD.orients &lt;- allOrients(FWD) # pass the function to primer F\nREV.orients &lt;- allOrients(REV) # pass the function to primer R\nFWD.orients # check the calculated orientations\nREV.orients\n\n# Count the number of times both primers (in all the possible orientations) appear in our dataset\nprimerHits &lt;- function(primer, fn) {\n  nhits &lt;- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)\n  return(sum(nhits &gt; 0))\n}\n\n# check the number of reads in which the primers F and R (in all possible orientations) are found in sample number \"5\"\nrbind(\n  FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs[[5]]),\n  FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs[[5]]),\n  REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs[[5]]),\n  REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs[[5]])\n)\n# On the left, we have the presence of forward and reverse primers (FWD and REV) in forward and reverse reads (FWD.ForwardReads, FWD.ReverseReads, REV.ForwardReads and REV.ReverseReads). On the top of the table, we see the four possible orientations of the primers (Forward, Complement, Reverse and RevComp).\n\ncutadapt &lt;- \"/usr/local/bin/cutadapt\" # path to cutadapt in your computer/machine\n\nsystem2(cutadapt, args = c(\"--version\")) # Run shell commands from R\n\n# Create a directoy or folder where your reads will be saved\npath.cut &lt;- file.path(path, \"cutadapt\")\n\nif (!dir.exists(path.cut)) dir.create(path.cut)\n\nfnFs.cut &lt;- file.path(path.cut, basename(fnFs))\nfnRs.cut &lt;- file.path(path.cut, basename(fnRs))\n\n# Produce arguments for cutadapt (visit the cutadapt website for more information)\nFWD.RC &lt;- dada2:::rc(FWD) # calculate the reverse complementary sequence\nREV.RC &lt;- dada2:::rc(REV)\n\n# add the specific adapters to F and R reads, which are need for cutadapt\nR1.flags &lt;- paste0(\"-a\", \" \", \"^\", FWD, \"...\", REV.RC)\nR2.flags &lt;- paste0(\"-A\", \" \", \"^\", REV, \"...\", FWD.RC)\n\n# Run cutadapt itself\nfor (i in seq_along(fnFs)) {\n  system2(cutadapt, args = c(\n    R1.flags, R2.flags, \"-n\", 2, \"-m\", 1,\n    \"--discard-untrimmed\",\n    \"-j\", 0,\n    \"-o\", fnFs.cut[i], \"-p\", fnRs.cut[i], # output files\n    fnFs[i], fnRs[i], # input files\n    \"--report=minimal\"\n  )) # Report minimal reports a summary\n}\n\n#  -n 2: remove the primers\n#   -m 1: remove empty reads\n\n# cutadapt will remove the primers and also the sequences in which none of the primers are found\n\n# after running cutadapt, check the number of primers found now in the output reads, in sample number \"5\"\nrbind(\n  FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.cut[[5]]),\n  FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.cut[[5]]),\n  REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.cut[[5]]),\n  REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.cut[[5]])\n)\n\n# be CAREFUL! it could be possible to find still some primers in your dataset. Do not worry if there are no many. Cutadapt and primerHits function\n# do not work in the same way, so some primers can be found.\n\n\n\nStep 4: Filter and Trimming steps\n\n# Create the folder \"filtered\" to save the trimmed reads\nfiltFs &lt;- file.path(path.cut, \"filtered\", basename(fnFs.cut))\nfiltRs &lt;- file.path(path.cut, \"filtered\", basename(fnRs.cut))\n\nout &lt;- filterAndTrim(fnFs.cut, filtFs, fnRs.cut, filtRs,\n  maxN = 0,\n  maxEE = c(2, 3), truncQ = 2, minLen = 50, rm.phix = TRUE,\n  compress = TRUE, multithread = TRUE\n)\n# input reads F without primers, output reads F, input reads R without primers, output reads R,\n# maxN: number of allowed ambiguities (N) in the reads\n# maxEE: maximum expected errors in F and R reads; they should be selected according to reads' quality\n# trunqQ: the minimum quality score of each nucleotides; remove reads with at least one nucleotide with an associated quality score under the selected value\n# minLen: the minimum size of the reads; remove all the reads under this size (bp)\n\nView(out)\n\n\n\nStep 5: DADA2\n\n# (visit DADA2 website for more information about the specific steps)\n# Learn error rates................\nerrF &lt;- learnErrors(filtFs, multithread = T, verbose = 1)\nerrR &lt;- learnErrors(filtRs, multithread = T, verbose = 1)\n\n# View Error plots................\nplotErrors(errF, nominalQ = TRUE)\nplotErrors(errR, nominalQ = TRUE)\n\n# Sample inference.................\n# it calculates the inferred composition of the samples. Removes all the possible sequence errors\n# and keeps just the real sequences.\ndadaFs &lt;- dada(filtFs, err = errF, multithread = TRUE)\ndadaRs &lt;- dada(filtRs, err = errR, multithread = TRUE)\ndadaFs[[5]] # check the inferred sample number 5. We can see the number of ASVs and unique sequences\n\nnames(dadaFs) &lt;- sample.names # giving the correct name of the samples\nnames(dadaRs) &lt;- sample.names\n\n# Merging F and R reads.............................\nmergers &lt;= mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose = TRUE)\nhead(mergers[[5]]) # check the results for sample number 5\n\n# Calculate the sequence tables......................\nseqtab_ITS_primavera_Rizo &lt;- makeSequenceTable(mergers)\ndim(seqtab_ITS_primavera_Rizo) # it shows the number of samples (including MOCK samples, negative control and so on) and the number of ASVs\nsaveRDS(seqtab_ITS_primavera_Rizo, file = \"C:/Users/radik/Desktop/Psylvestris_DataPper/seqtab_ITS_Primavera_rizo.rds\")\n# save the corresponding RDS file\n\n# IMPORTANT: if we have different sequencing runs included in the same scientific project, we should merge then\n# at this point. For that purpose, we should merge the sequence tables coming from each sequencing runs\n\n\n\nStep 6: Merge SeqTabs obtained from different sequencing runs\n\n# (skip this step if you included all the samples in one sequencing run. In that case, go to step7)\n\nseqtab_pri_endo &lt;- readRDS(\"seqtab_ITS_Primavera_endo.rds\") # load each sequence table\nseqtab_pri_rizo &lt;- readRDS(\"seqtab_ITS_Primavera_rizo.rds\")\nseqtab_ve_endo &lt;- readRDS(\"seqtab_ITS_Verano_endo.rds\")\nseqtab_ve_endo_rizo &lt;- readRDS(\"seqtab_ITS_Verano_EndoRizo.rds\")\nseqtab_ve_rizo &lt;- readRDS(\"seqtab_ITS_Rizo_verano.rds\")\n\n# merge all the seqTabs\nmergedSeqTab &lt;- mergeSequenceTables(seqtab_pri_endo, seqtab_pri_rizo,\n  seqtab_ve_endo, seqtab_ve_endo_rizo, seqtab_ve_rizo1,\n  repeats = \"error\"\n)\n\n\n\nStep 7: Chimera removal\n\n# Eliminacion de quimeras..................\nseqtab.nochim &lt;- removeBimeraDenovo(mergedSeqTab, method = \"consensus\", multithread = TRUE, verbose = TRUE)\n# in case you have just one seqtab, replace \"mergedSeqTab\" by \"seqtab_ITS_primavera_Rizo\"\ndim(seqtab.nochim) # indicates the number of samples and ASVs, but not the number of sequences\n\n\n\nStep 8: Taxonomical classification\n\ntaxa_UNITE &lt;- assignTaxonomy(seqtab.nochim, \"/mnt/datos/databases/sh_general_release_dynamic_04.02.2020.fasta\", multithread = TRUE)\n# indicate the path where the database is located.\n\n\n\nStep 9: Obtaining the ASV table\n\n# Format the data\nASV &lt;- seqtab.nochim\nASVt &lt;- t(ASV)\n\n# Replace NA values by \"unclassified\" and remove the column \"species\" created during the classification\ntaxa_UNITE_na &lt;- apply(taxa_UNITE, 2, tidyr::replace_na, \"unclassified\")[, -7]\n\n# Rename the ASVs (if we have 100 ASVs, we will name them from ASV001 to ASV100)\nnumber.digit &lt;- nchar(as.integer(nrow(ASVt)))\nnames &lt;- paste0(\"ASV%0\", number.digit, \"d\") # As many 0 as digits\nASV_names &lt;- sprintf(names, 1:nrow(ASVt))\n\n# Join taxonomy and ASV table\nASV_table_classified_raw &lt;- cbind(as.data.frame(taxa_UNITE_na, stringsAsFactors = FALSE), as.data.frame(ASV_names, stringsAsFactors = FALSE), as.data.frame(ASVt, stringsAsFactors = FALSE))\n\n# Add the sequence of each ASV to the ASV table in the correct position\nASV_seqs &lt;- rownames(ASV_table_classified_raw)\nrownames(ASV_table_classified_raw) &lt;- NULL\nASV_table_classified_raw &lt;- cbind(ASV_seqs, ASV_table_classified_raw)\n\n# 10) REMOVE THE MOCK COMMUNITY SAMPLES------------------------------------\n# (we will use as trimming cut-off the cut-off value obtained for bacterial dataset)\n# (in our case, the bacterial cut-off value was 0.001792%)\n\n# obtain the number of sequences per ASV\nASV_sums &lt;- rowSums(ASV_table_classified_raw[, 9:ncol(ASV_table_classified_raw)])\n\n# Obtain the total number of sequences\nsum.total &lt;- sum(ASV_sums)\n\n# Calculate the number of sequences that suppose that percentage in the fungal dataset\nnseq_cutoff &lt;- (0.001792 / 100) * sum.total\n\n# Filtering according to the stablished cut-offf\nASV_filtered_MOCK &lt;- ASV_table_classified_raw[which(ASV_sums &gt; nseq_cutoff), ]\n\n# Order the corresponding table\nASV_filtered_MOCK &lt;- ASV_filtered_MOCK[order(ASV_filtered_MOCK[[\"ASV_names\"]]), ]\n\n# 11) REMOVAL OF PLASTIDS, PLANT, CHLOROPLAST AND OTHER ARTIFACTS SEQUENCES\nASV_table_MOCK &lt;- ASV_filtered_MOCK[(which(ASV_filtered_MOCK$Genus != \"Streptophyta\" &\n  ASV_filtered_MOCK$Genus != \"Chlorophyta\" &\n  ASV_filtered_MOCK$Genus != \"Bacillariophyta\" &\n  ASV_filtered_MOCK$Family != \"Streptophyta\" &\n  ASV_filtered_MOCK$Family != \"Chlorophyta\" &\n  ASV_filtered_MOCK$Family != \"Bacillariophyta\" &\n  ASV_filtered_MOCK$Family != \"Mitochondria\" &\n  ASV_filtered_MOCK$Class != \"Chloroplast\" &\n  ASV_filtered_MOCK$Order != \"Chloroplast\" &\n  ASV_filtered_MOCK$Kingdom != \"Eukaryota\" &\n  ASV_filtered_MOCK$Kingdom != \"unclassified\")), ]\n\nASV_final &lt;- ASV_table_MOCK[which(ASV_table_MOCK$Kingdom == \"k__Fungi\"), ] # we also remove those ASV not classified at Kingdom level\n\n# Save the definitive ASV Table\nwrite.table(ASV_final, file = \"ASV_final_ITS.txt\", sep = \"\\t\")"
  },
  {
    "objectID": "sequencing_reads_processing_16S.html",
    "href": "sequencing_reads_processing_16S.html",
    "title": "Sequencing Reads Processing 16S",
    "section": "",
    "text": "Processing of Illumina (MiSeq reads). 16S (bacteria) reads\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n  install.packages(\"BiocManager\")\n}\nBiocManager::install(\"dada2\")\n\n# phyloseq\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n  install.packages(\"BiocManager\")\n}\nBiocManager::install(\"phyloseq\")\n\n# Biocgenerics\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {\n  install.packages(\"BiocManager\")\n}\nBiocManager::install(\"BiocGenerics\")\n\n# Biostrings\nif (!require(\"BiocManager\", quietly = TRUE)) {\n  install.packages(\"BiocManager\")\n}\nBiocManager::install(\"Biostrings\")\n\n# ShortRead\nif (!require(\"BiocManager\", quietly = TRUE)) {\n  install.packages(\"BiocManager\")\n}\nBiocManager::install(\"ShortRead\")\n\n# ggplot2 (for plotting)\ninstall.packages(\"ggplot2\")\n\n# tidyverse\ninstall.packages(\"tidyverse\")\n\n\n# Load corresponding libraries\nlibrary(dada2)\nlibrary(phyloseq)\nlibrary(BiocGenerics)\nlibrary(Biostrings)\nlibrary(ShortRead)\nlibrary(devtools)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n\npath &lt;- \"C:/Users/radik/Desktop/Psylvestris_DataPper\" #set the path where the fastq.gz files are\nlist.files(path)#check that all the needed files are in the path\n\n#NOTE: if our scientific project includes different sequencing runs (for instance, if you have a lot of samples that do not fit well into just one run), \n#we should repeat steps 1) to 6) for each sequencing run, and then (step 7), merge all the sequence tables obtained in the step 6)\n\nIf our scientific project includes different sequencing runs (for instance, if you have a lot of samples that do not fit well into just one run), we should repeat steps 1) to 6) for each sequencing run, and then (step 7), merge all the sequence tables obtained in the step 6)."
  },
  {
    "objectID": "sequencing_reads_processing_16S.html#step-4.-filter-and-trimming-steps",
    "href": "sequencing_reads_processing_16S.html#step-4.-filter-and-trimming-steps",
    "title": "Sequencing Reads Processing 16S",
    "section": "Step 4. Filter and trimming steps",
    "text": "Step 4. Filter and trimming steps\n\n# Create the folder \"filtered\" to save the trimmed reads\nfiltFs &lt;- file.path(path, \"filtered\", basename(fnFs))\nfiltRs &lt;- file.path(path, \"filtered\", basename(fnRs))\n\n# trimming step itself:\nout &lt;- filterAndTrim(fnFs, filtFs, fnRs, filtRs,\n  truncLen = c(269, 215),\n  maxN = 0, maxEE = c(2, 2), truncQ = 2, rm.phix = TRUE,\n  compress = TRUE, multithread = TRUE, minLen = 50\n)\n# input reads F, output reads F, input reads R, output reads R,\n# truncLen: trimming positions in F and R reads, according to Figaro results\n# maxN: number of allowed ambiguities (N) in the reads\n# maxEE: maximum expected errors in F and R reads, according to Figaro results\n# trunqQ: the minimum quality score of each nucleotides; remove reads with at least one nucleotide with an associated quality score under the selected value\n# minLen: the minimum size of the reads; remove all the reads under this size (bp)\n\nhead(out)"
  },
  {
    "objectID": "analysis_16S.html",
    "href": "analysis_16S.html",
    "title": "Script for the analysis of already processed 16S reads (from Illumina MiSeq platform)",
    "section": "",
    "text": "# Install required packages \n\nBiocManager::install(\"phyloseq\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"vegan\")\ninstall.packages(\"purrr\")\n\n\n#load the libraries\nlibrary(phyloseq)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(vegan)\nlibrary(purrr)"
  },
  {
    "objectID": "analysis_16S.html#load-all-the-data",
    "href": "analysis_16S.html#load-all-the-data",
    "title": "Script for the analysis of already processed 16S reads (from Illumina MiSeq platform)",
    "section": "Load all the data",
    "text": "Load all the data\nLoad the ASV table (with the taxonomy and sequence counts)\n\ndata &lt;- read.table(\"ASV_final.txt\", header = T, sep = \"\\t\")\ncolnames_data &lt;- colnames(data)\n\nmt &lt;- read.table(\"metadatos.txt\", sep = \"\\t\", header = T) # load the metadata describing the main characteristics of each sample\nrow.names(mt) &lt;- mt$Sample\n\ntax &lt;- data[, 2:8] # select the columns where the bacterial taxonomy is indicated (From Phylum level to the ASV)\nASV &lt;- data[, 9:ncol(data)] # select the columns where the number of sequences of each ASV in each sample is indicated\n\ndna &lt;- Biostrings::DNAStringSet(data$ASV_seqs) # load the sequence of each ASV\nnames(dna) &lt;- data$ASV_names\n\nrow.names(tax) &lt;- data$ASV_names\nrow.names(ASV) &lt;- data$ASV_names\n\nidentical(rownames(ASV), rownames(tax)) # it should be TRUE, otherwise review the former tables"
  },
  {
    "objectID": "analysis_16S.html#create-a-phyloseq-object",
    "href": "analysis_16S.html#create-a-phyloseq-object",
    "title": "Script for the analysis of already processed 16S reads (from Illumina MiSeq platform)",
    "section": "Create a phyloseq object",
    "text": "Create a phyloseq object\n\n# Create a phyloseq object\nphy_OTUtable &lt;- otu_table(ASV, taxa_are_rows = T)\nphy_taxonomy &lt;- tax_table(as.matrix(tax))\nphy_metadata &lt;- sample_data(mt)\n\n# Put everything into a phyloseq object\nphy_data_total &lt;- phyloseq(phy_OTUtable, phy_taxonomy, phy_metadata)\n\n# Check the number of samples included in each object\nnsamples(phy_OTUtable)\nsum(sample_names(phy_metadata) %in% sample_names(phy_OTUtable))\nnsamples(phy_metadata)"
  },
  {
    "objectID": "analysis_16S.html#first-trimming-of-the-dataset",
    "href": "analysis_16S.html#first-trimming-of-the-dataset",
    "title": "Script for the analysis of already processed 16S reads (from Illumina MiSeq platform)",
    "section": "First trimming of the dataset",
    "text": "First trimming of the dataset\nOur dataset included samples obtained in spring and summer, samples coming from P.sylvestris, P.pinaster and P. sylvestris subsp. nevadensis. Here we only wanted the samples corresponding to P. sylvestris sampled in spring)\n\nphy_data2 &lt;- subset_samples(phy_data_total, Season != \"Summer\") # removal of summer samples\nphy_data3 &lt;- subset_samples(phy_data2, Species == \"Psylvestris\") # selecting the plant host\n\n# check the total number of sequences\nnumsec &lt;- as.data.frame(colSums(otu_table(phy_data3)))\nView(numsec) # it is convenient to order this table\n\nphy_data4 &lt;- subset_samples(\n  phy_data3,\n  Sample != \"prASH10E\" & Sample != \"prBSD10E\" & # we remove replicates with a very low number of quality sequences\n    Sample != \"prBSD11E\" & Sample != \"prNSH11E\"\n)\n\nnumsec_pruned &lt;- as.data.frame(colSums(otu_table(phy_data4)))\nwrite.table(data.frame(\" \" = rownames(numsec_pruned), numsec_pruned), file = \"NumberofWorkingSequences.txt\", sep = \"\\t\", row.names = F) # save the results"
  },
  {
    "objectID": "analysis_16S.html#subset-samples",
    "href": "analysis_16S.html#subset-samples",
    "title": "Script for the analysis of already processed 16S reads (from Illumina MiSeq platform)",
    "section": "Subset samples",
    "text": "Subset samples\nWe want to separate the data by mountainous area under study and by plant compartment\n\nAlmijara &lt;- subset_samples(phy_data4, Site == \"Almijara\")\nAlmijara &lt;- prune_taxa(taxa_sums(Almijara) &gt; 0.0, Almijara)\n\nAlmijara_rizo &lt;- subset_samples(Almijara, Compartment == \"Rhizosphere\")\nAlmijara_rizo &lt;- prune_taxa(taxa_sums(Almijara_rizo) &gt; 0.0, Almijara_rizo)\n\nAlmijara_endo &lt;- subset_samples(Almijara, Compartment == \"Endosphere\")\nAlmijara_endo &lt;- prune_taxa(taxa_sums(Almijara_endo) &gt; 0.0, Almijara_endo)\n\nBaza &lt;- subset_samples(phy_data4, Site == \"Baza\")\nBaza &lt;- prune_taxa(taxa_sums(Baza) &gt; 0.0, Baza)\n\nBaza_rizo &lt;- subset_samples(Baza, Compartment == \"Rhizosphere\")\nBaza_rizo &lt;- prune_taxa(taxa_sums(Baza_rizo) &gt; 0.0, Baza_rizo)\n\nBaza_endo &lt;- subset_samples(Baza, Compartment == \"Endosphere\")\nBaza_endo &lt;- prune_taxa(taxa_sums(Baza_endo) &gt; 0.0, Baza_endo)\n\nNevada &lt;- subset_samples(phy_data4, Site == \"SierraNevada\")\nNevada &lt;- prune_taxa(taxa_sums(Nevada) &gt; 0.0, Nevada)\n\nNevada_rizo &lt;- subset_samples(Nevada, Compartment == \"Rhizosphere\")\nNevada_rizo &lt;- prune_taxa(taxa_sums(Nevada_rizo) &gt; 0.0, Nevada_rizo)\n\nNevada_endo &lt;- subset_samples(Nevada, Compartment == \"Endosphere\")\nNevada_endo &lt;- prune_taxa(taxa_sums(Nevada_endo) &gt; 0.0, Nevada_endo)\n\nrizo &lt;- subset_samples(phy_data4, Compartment == \"Rhizosphere\") # all the samples of the rhizosphere\nrizo &lt;- prune_taxa(taxa_sums(rizo) &gt; 0.0, rizo)\n\nendo &lt;- subset_samples(phy_data4, Compartment == \"Endosphere\") # all the samples of the root endosphere\nendo &lt;- prune_taxa(taxa_sums(endo) &gt; 0.0, endo)"
  },
  {
    "objectID": "analysis_16S.html#rarefaction-curves",
    "href": "analysis_16S.html#rarefaction-curves",
    "title": "Script for the analysis of already processed 16S reads (from Illumina MiSeq platform)",
    "section": "Rarefaction curves",
    "text": "Rarefaction curves\n\nAlmijara Rhizosphere\n\nmt &lt;- as.data.frame(sample_data(Almijara_rizo))[order(as.character(rownames(as.data.frame(sample_data(Almijara_rizo)))), decreasing = F), ] # save the metadata of this sub-dataset\notu &lt;- otu_table(Almijara_rizo) # save the ASV table of this sub-dataset\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt) # it should be TRUE\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition) # prepare the data for a better plotting. Condition= \"Symptomatic\" and \"Asymptomatic\"\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F) # rarefaction itself\nrare &lt;- lapply(out, function(x) { # create a table from the rarefaction\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample # data preparation for the plotting\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition) # remove all the characters before \"/\"\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) + # coloring by condition of the trees\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), linewidth = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"#3399FF\")) + # specific colors\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"#3399FF\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra de Almijara (Rhizosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\n\np\n\n# save the plot in .tiff\nggsave(filename = \"Rarefacc_rizo_Almijara_SciData.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nAlmijara Endosphere\n\nmt &lt;- as.data.frame(sample_data(Almijara_endo))[order(as.character(rownames(as.data.frame(sample_data(Almijara_endo)))), decreasing = F), ]\notu &lt;- otu_table(Almijara_endo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"deepskyblue\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"deepskyblue\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra de Almijara (Endosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\np\n\nggsave(filename = \"Rarefacc_Almijara_endo_SciData.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nBaza Rhizosphere\n\nmt &lt;- as.data.frame(sample_data(Baza_rizo))[order(as.character(rownames(as.data.frame(sample_data(Baza_rizo)))), decreasing = F), ]\notu &lt;- otu_table(Baza_rizo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"#66CC33\", \"Asymptomatic\" = \"#66CC33\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"#66CC33\", \"Asymptomatic\" = \"#66CC33\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra de Baza (Rhizosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\n\np\n\nggsave(filename = \"Rarefacc_Baza_Rizo_SciData.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nBaza Endosphere\n\nmt &lt;- as.data.frame(sample_data(Baza_endo))[order(as.character(rownames(as.data.frame(sample_data(Baza_endo)))), decreasing = F), ]\notu &lt;- otu_table(Baza_endo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"green\", \"Asymptomatic\" = \"#3399FF\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"green\", \"Asymptomatic\" = \"#3399FF\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra de Baza (Endosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\np\n\nggsave(filename = \"Rarefacc_Baza_endosphere_SciData.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nSierra Nevada Rhizosphere\n\nmt &lt;- as.data.frame(sample_data(Nevada_rizo))[order(as.character(rownames(as.data.frame(sample_data(Nevada_rizo)))), decreasing = F), ]\notu &lt;- otu_table(Nevada_rizo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"magenta\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"magenta\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra Nevada (Rhizosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\np\n\nggsave(filename = \"Rarefacc_SNevada_Rizo_SciData.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL\n\n\n\nSierra Nevada Endosphere\n\nmt &lt;- as.data.frame(sample_data(Nevada_endo))[order(as.character(rownames(as.data.frame(sample_data(Nevada_endo)))), decreasing = F), ]\notu &lt;- otu_table(Nevada_endo)\notu &lt;- as.data.frame(t(otu))\notu &lt;- otu[order(as.character(rownames(otu)), decreasing = FALSE), ]\n\nrownames(otu) == rownames(mt)\nrownames(otu) &lt;- paste0(rownames(otu), \"/\", mt$Condition)\nsample_names &lt;- rownames(otu)\n\nout &lt;- rarecurve(otu, step = 100, label = F)\nrare &lt;- lapply(out, function(x) {\n  b &lt;- as.data.frame(x)\n  b &lt;- data.frame(ASV = b[, 1], raw.read = rownames(b))\n  b$raw.read &lt;- as.numeric(gsub(\"N\", \"\", b$raw.read))\n  return(b)\n})\n\nnames(rare) &lt;- sample_names\nrare &lt;- map_dfr(rare, function(x) {\n  z &lt;- data.frame(x)\n  return(z)\n}, .id = \"Sample\")\n\nrare$Condition &lt;- rare$Sample\nrare$Condition &lt;- gsub(\".*/\", \"\", rare$Condition)\nrare$raw.read &lt;- as.numeric(rare$raw.read)\n\n\np &lt;- ggplot(rare, aes(x = raw.read, y = ASV, colour = Condition, group = Sample)) +\n  theme_bw() +\n  geom_point(aes(colour = Condition), size = 0.85) +\n  geom_line(aes(colour = Condition), size = 1.2) +\n  scale_fill_manual(values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"pink\")) +\n  scale_color_manual(\n    values = c(\"Symptomatic\" = \"black\", \"Asymptomatic\" = \"pink\"),\n    name = \"Condition\",\n    breaks = c(\"Symptomatic\", \"Asymptomatic\"),\n    labels = c(\"Symptomatic\", \"Asymptomatic\")\n  ) +\n  labs(title = \"Sierra Nevada (Endosphere)\", x = \"Number of sequences\", y = \"Number of ASV\") +\n  guides(alpha = FALSE) +\n  theme(\n    legend.key = element_blank(),\n    legend.title.align = 0.85,\n    legend.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 14),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    legend.text = element_text(size = 16)\n  )\np\n\nggsave(filename = \"Rarefacc_SNevada_endo_SciData.tiff\", plot = p, device = tiff(), width = 18, height = 16, units = \"cm\", dpi = 800)\nrare &lt;- NULL"
  },
  {
    "objectID": "prepare_dwc.html",
    "href": "prepare_dwc.html",
    "title": "Prepare DwC",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(DT)"
  },
  {
    "objectID": "prepare_dwc.html#aim",
    "href": "prepare_dwc.html#aim",
    "title": "Prepare DwC",
    "section": "Aim",
    "text": "Aim\nThis script accomodate the data to DarwinCore Archive for the integration into GBIF.\nThe desired structure of the Darwin Core Archive (DwC-A) encompasses comprehensive sampling event dataconsisting of event-type data, occurrence data and measurementOrFact type data. This structure is organised based on a hierarchical framework for sampling events.\nWe considered each tree as an event. In each tree (parentID) a soil sample is taken (eventID: S), also endosphere (eventID: E) and roots sample (eventID: R) for metabarcoding"
  },
  {
    "objectID": "prepare_dwc.html#prepare-data",
    "href": "prepare_dwc.html#prepare-data",
    "title": "Prepare DwC",
    "section": "Prepare data",
    "text": "Prepare data\n\nbac_raw &lt;- read_delim(\"data/ASV_bacterias.txt\")\nbac &lt;- bac_raw |&gt; \n  pivot_longer(cols = \n                 c(everything(), \n                   -any_of(c(\"Kingdom\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"ASV\"))),\n               values_to = \"n\", \n               names_to = \"sample\") |&gt; \n  mutate(tree = str_sub(sample, end = -2),\n         target = str_sub(sample, start= -1)) |&gt; \n  mutate(target = case_when(\n    target == \"E\" ~ \"Endosphere\",\n    target == \"R\" ~ \"Rhizosphere\")\n  )\n\nfungi_raw &lt;- read_delim(\"data/ASV_hongos.txt\")\nfungi &lt;- fungi_raw |&gt; \n  pivot_longer(cols = \n                 c(everything(), \n                   -any_of(c(\"Kingdom\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"ASV\"))),\n               values_to = \"n\", \n               names_to = \"sample\") |&gt; \n  mutate(tree = str_sub(sample, end = -2),\n         target = str_sub(sample, start= -1)) |&gt; \n  mutate(target = case_when(\n    target == \"E\" ~ \"Endosphere\",\n    target == \"R\" ~ \"Rhizosphere\")\n  )\n\n\nmd_events &lt;- read_excel(\"data/metadata_trees.xlsx\")\n\nsoil_raw &lt;- read_delim(\"data/DatosFisicoquimicos_Psylvestris.txt\") |&gt; \n  clean_names() |&gt; \n  mutate(site = ifelse(site == \"Snevada\",  \"S. Nevada\", paste0(\"S. \", site))) |&gt;\n  rename(tree = sample) |&gt; \n  mutate(eventID = paste0(tree, \"S\"))\n\nsoil &lt;- soil_raw |&gt; \n    pivot_longer(cols = \n                 c(everything(), \n                   -any_of(c(\"tree\",\"site\",\"condition\", \"eventID\"))),\n               values_to = \"value\", \n               names_to = \"variable\")"
  },
  {
    "objectID": "prepare_dwc.html#prepare-eventtable",
    "href": "prepare_dwc.html#prepare-eventtable",
    "title": "Prepare DwC",
    "section": "Prepare eventTable",
    "text": "Prepare eventTable\n\nparentEventID\n\nproto_parent_event &lt;- \n  md_events |&gt; \n  mutate(\n    type = \"Event\",\n    eventType = \"Site Visit\", \n    language = \"en\",\n    license = \"https://creativecommons.org/licenses/by/4.0/legalcode.es\",\n    institutionCode = \"CSIC-EEZ\",\n    datasetName = \"Root-associated microbiota of decline-affected and asymptomatic Pinus sylvestris trees\", \n    habitat = \"Pinus sylvestris tree\", \n    samplingProtocol = NA,\n    fieldNumber = tree,\n    bibliographicCitation = \"Lasa, A.V.; Fernández-González, A.J.; Villadas, P.J.; Mercado-Blanco, J.; Pérez-Luque, A.J.; Fernández-López, M. (2024). Mediterranean pine forest decline: a matter of root-associated microbiota and climate change. Science of The Total Environment 926: 171858. doi: 10.1016/j.scitotenv.2024.171858\", \n    eventDate = as.Date(as.character(sampling_date), format = \"%Y%m%d\"), \n    countryCode = \"ES\", \n    parentEventID = NA) |&gt; \n  unite(\"eventID\", c(\"tree\",\"sampling_date\"), sep = \"-\", remove = FALSE) |&gt; \n  relocate(\n    eventID, parentEventID, eventDate,\n    type, eventType, language, license, \n    bibliographicCitation, institutionCode, datasetName, \n    samplingProtocol, \n    year, month, day, \n    continent, country, countryCode, stateProvince = province, municipality, locality = location,\n    decimalLatitude = lat, decimalLongitude = long, verbatimCoordinates = verbatim_coordinates,\n    verbatimElevation = Elevation, habitat, \n    eventRemarks = health_status,\n    fieldNumber, \n    locationID = site) |&gt; \n    dplyr::select(-verbatim_lat, -verbatim_long)\n\n\n\nsoilEvent\n\nsoil_event &lt;- proto_parent_event |&gt; \n  dplyr::select(-parentEventID, -eventType, -samplingProtocol, -habitat) |&gt; \n  rename(parentEventID = eventID) |&gt; \n  mutate(protoID = paste0(tree, \"S\"),\n         eventType = \"Sampling\",\n         samplingProtocol = \"Soil samples (500 g) to determine physicochemical parameters\",\n         habitat = \"Soil close to the roots of each target tree (Pinus sylvestris)\") |&gt; \n  unite(\"eventID\", c(\"protoID\",\"sampling_date\"), sep = \"-\", remove = TRUE)\n\n\n\nRhizosphere and Endosphere Events\n\nmicro_event &lt;- proto_parent_event |&gt; \n  inner_join((fungi |&gt; dplyr::select(sample, tree) |&gt; unique())) |&gt; \n  dplyr::select(-parentEventID, -eventType, -samplingProtocol, -habitat) |&gt; \n  rename(parentEventID = eventID) |&gt; \n  unite(\"eventID\", c(\"sample\",\"sampling_date\"), sep = \"-\", remove = FALSE) |&gt;\n  mutate(target = str_sub(sample, start= -1)) |&gt; \n  mutate(\n    eventType = \"Sampling\",\n    samplingProtocol = case_when(\n      target == \"E\" ~ \"DNA extraction from the root endosphere of Pinus sylvestris trees during the spring, and sequencing of the 16S rRNA gene for bacteria and the fungal ITS2 region for fungi\",\n      target == \"R\" ~ \"DNA extraction from the rhizosphere of Pinus sylvestris trees during the spring, and sequencing of the 16S rRNA gene for bacteria and the fungal ITS2 region for fungi\"\n    ),\n    habitat = case_when(\n      target == \"E\" ~ \"Root endosphere of Pinus sylvestris\",\n      target == \"R\" ~ \"Rhizosphere of Pinus sylvestris\"\n    )) |&gt; \n  dplyr::select(-sample, -target, -sampling_date)\n\n\n\nCombined events\n\nevents &lt;- proto_parent_event |&gt;\n  dplyr::select(-sampling_date) |&gt; \n  bind_rows(micro_event,soil_event) |&gt; \n  dplyr::select(-tree) \n\n\n# Export table\nwrite_csv(events, \"output/dwc_db/event.csv\")\n\n\n\nExtended Measurement Or Facts\n\ndicc_variables_fq &lt;- read_excel(\"data/fq_variables.xlsx\")\n\naux &lt;- soil_event |&gt; \n  dplyr::select(eventID) |&gt; \n  separate(eventID, into = c(\"idsoil\", \"sampling_date\"), remove = FALSE)\n\nmof &lt;- soil |&gt; \n  dplyr::select(idsoil = eventID, variable, value) |&gt; \n  inner_join(dicc_variables_fq) |&gt; \n  inner_join(aux) |&gt; \n  unite(\"measurementID\", c(\"eventID\", \"id_var\"), sep = \"-\", remove = FALSE) |&gt; \n  mutate(\n    measurementDeterminedDate = as.Date(as.character(sampling_date), format = \"%Y%m%d\"),\n    measurementMethod = measurementMethod,\n    measurementRemarks = \"\",\n    measurementDeterminedBy = \"Laboratorio Analítico Bioclínico (https://www.lab-sl.com/en/) Almería, Spain\"\n  ) |&gt; \n  relocate(\n    measurementID, \n    measurementType = name,\n    measurementValue = value, \n    measurementUnit = unit,\n    measurementDeterminedDate,\n    measurementDeterminedBy,\n    measurementMethod, \n    measurementRemarks) |&gt; \n  dplyr::select(-idsoil, -id_var, -sampling_date, -variable)\n\n\n# Export table\nwrite_csv(mof, \"output/dwc_db/mof.csv\")"
  },
  {
    "objectID": "prepare_dwc.html#occurrences",
    "href": "prepare_dwc.html#occurrences",
    "title": "Prepare DwC",
    "section": "Occurrences",
    "text": "Occurrences\n\noccurrenceID: eventID + ASV + Date. e.g. = ASH01E-ASV00004-202204\n\n\nBacteria\n\ndf_idevents &lt;- events |&gt; \n  filter(samplingProtocol != \"Soil samples (500 g) to determine physicochemical parameters\") |&gt; \n  filter(!is.na(parentEventID)) |&gt; \n  dplyr::select(eventID, habitat, license, institutionCode, language, datasetName, \n                continent, country, countryCode, stateProvince, municipality, locality,\n                decimalLatitude, decimalLongitude) |&gt; \n  separate(eventID, into = c(\"sample\", \"sampling_date\"), remove = FALSE)\n\nocc_bac &lt;- bac |&gt; \n filter(n &gt; 0) |&gt; \n  inner_join(df_idevents) |&gt; \n  unite(\"occurrenceID\", c(\"eventID\",\"ASV\"), sep = \"-\", remove = FALSE) |&gt; \n  mutate(\n    basisOfRecord = \"MaterialSample\",\n    collectionCode = \"MAE_PSylvestris\",\n    recordedBy = \"Ana V. Lasa | Antonio J. Fernández-González | Pablo J. Villadas | Jesús Mercado-Blanco | Antonio J. Pérez-Luque | Manuel Fernández-López\",\n    identifiedBy = \"Ana V. Lasa\",\n    identifiedByID = \"https://orcid.org/0000-0003-3783-7157\",\n    occurrenceStatus = case_when(\n      n == 0 ~ \"absent\", \n      n &gt; 0 ~ \"present\"),\n    preparations = \"DNA extract\",\n    nameAccordingToID = \"Ribosomal Database Project RDP-II training set v.18\", \n    verbatimIdentification = ASV\n  ) |&gt; \n  rename(\n    taxonID = ASV,\n    individualCount = n) |&gt; \n  mutate(across(c(Kingdom, Phylum, Class, Order, Family, Genus), ~replace(., . == \"unclassified\", NA))) |&gt; \n  relocate(\n    occurrenceID, language, license, institutionCode, collectionCode, datasetName, \n    basisOfRecord, recordedBy, individualCount, occurrenceStatus, preparations,\n    eventID, identifiedBy, identifiedByID, taxonID, nameAccordingToID,\n    kingdom = Kingdom, phylum = Phylum, class = Class, order = Order, family = Family, genus = Genus,\n    verbatimIdentification, \n    continent, country, countryCode, stateProvince, municipality, locality,\n    decimalLatitude, decimalLongitude, habitat,\n    fieldNumber = sample) |&gt; \n  dplyr::select(-tree, -target, -sampling_date)\n\n\n\nFungi\n\nocc_fungi &lt;- fungi |&gt; \n filter(n &gt; 0) |&gt; \n  inner_join(df_idevents) |&gt; \n  unite(\"occurrenceID\", c(\"eventID\",\"ASV\"), sep = \"-\", remove = FALSE) |&gt; \n  mutate(\n    basisOfRecord = \"MaterialSample\",\n    collectionCode = \"MAE_PSylvestris\",\n    recordedBy = \"Ana V. Lasa | Antonio J. Fernández-González | Pablo J. Villadas | Jesús Mercado-Blanco | Antonio J. Pérez-Luque | Manuel Fernández-López\",\n    identifiedBy = \"Ana V. Lasa\",\n    identifiedByID = \"https://orcid.org/0000-0003-3783-7157\",\n    occurrenceStatus = case_when(\n      n == 0 ~ \"absent\", \n      n &gt; 0 ~ \"present\"),\n    preparations = \"DNA extract\",\n    nameAccordingToID = \"Ribosomal Database Project RDP-II training set v.18\", \n    verbatimIdentification = ASV\n  ) |&gt; \n  rename(\n    taxonID = ASV,\n    individualCount = n) |&gt; \n  mutate(across(c(Kingdom, Phylum, Class, Order, Family, Genus), ~replace(., . == \"unclassified\", NA))) |&gt; \n  relocate(\n    occurrenceID, language, license, institutionCode, collectionCode, datasetName, \n    basisOfRecord, recordedBy, individualCount, occurrenceStatus, preparations,\n    eventID, identifiedBy, identifiedByID, taxonID, nameAccordingToID,\n    kingdom = Kingdom, phylum = Phylum, class = Class, order = Order, family = Family, genus = Genus,\n    verbatimIdentification, \n    continent, country, countryCode, stateProvince, municipality, locality,\n    decimalLatitude, decimalLongitude, habitat,\n    fieldNumber = sample) |&gt; \n  dplyr::select(-tree, -target, -sampling_date)\n\n\nocc &lt;- bind_rows(occ_bac, occ_fungi)\n\n# Export table\nwrite_csv(occ, \"output/dwc_db/occ.csv\")"
  }
]